{
  "name": "MonkOS",
  "tagline": "An experimental 64-bit operating system",
  "body": "MonkOS\r\n======\r\n\r\nMonkOS is an experimental 64-bit operating system for Intel and AMD\r\nprocessors. It is a mix of C and assembly language and is a work in progress.\r\nCurrently, it consists of a BIOS boot loader, a virtual console system, an\r\ninterrupt handling system, a paged memory manager, a few simple device\r\ndrivers, and a primitive interactive shell. The boot loader is designed to\r\nlaunch the operating system from a cdrom.\r\n\r\n##Building\r\n\r\nThe OS currently builds under linux using a cross-compiler.  There are two\r\nways to build it: (1) by installing all the necessary tools on your system and\r\nrunning `make`, or (2) by using a ready-made docker container that  contains\r\nall the build tools you'll need.\r\n\r\n###Building with local tools\r\n\r\nTo build with tools installed on your local system, you'll need to have\r\nthe following software already installed:\r\n\r\n* gcc x86_64 cross-compiler for elf binaries (I used version 5.3)\r\n* gnu binutils (I used version 2.26)\r\n* nasm assembler\r\n* genisoimage\r\n* exuberant-ctags (optional, for help with editing)\r\n* gdb (optional, for debugging)\r\n* qemu (optional, for testing)\r\n* doxygen (optional)\r\n\r\nMost of these tools are available from standard linux package managers. The\r\ncross-compiler, however, is not. To build a cross-compiler, consult the\r\ninstructions on [this page](http://wiki.osdev.org/GCC_Cross-Compiler). Make\r\nsure to also follow the [libgcc without red-zone](http://wiki.osdev.org/Libgcc_without_red_zone)\r\ninstructions.  Note that the red-zone instructions are a bit out of date; if\r\nyou are using a more recent version of gcc (such as 5.3), you'll need to\r\nmodify the `gcc/config.gcc` file (not `gcc/config.cc`).\r\n\r\nOnce you've installed all the tools and made sure the cross-compiler is in\r\nyour path, run `make`.\r\n\r\n```bash\r\n$ make\r\n```\r\n\r\nThis results in a bootable cdrom ISO file called `monk.iso` in your build\r\nsubdirectory.\r\n\r\n###Building with docker-ized tools\r\n\r\nBecause it can be a bit of a pain to build and install a cross-compiler, a\r\ndocker container has been prepared, allowing you to avoid building the cross-compiler\r\nyourself.  To run the docker-based build, make sure you have a recent\r\nversion of docker installed on your system, add yourself to your system's\r\ndocker user group, and then type the following:\r\n\r\n```bash\r\n$ make docker\r\n```\r\n\r\nThis will pull down the docker container\r\n([`brett/monkos`](https://hub.docker.com/r/brett/monkos/)) if you don't\r\nalready have it, run the build inside the container, and generate the iso file\r\n(and all other intermediate output files) in your build subdirectory.  It\r\nbehaves almost exactly as if you ran `make` using a cross-compiler installed\r\nlocally on your system.\r\n\r\n##Running MonkOS\r\n\r\nThere are several ways to run MonkOS once you have the iso file. The first and\r\nmost time-consuming way is to burn it to a CD or DVD ROM using your favorite\r\nburning utility. This is the only way to test MonkOS on a bare-metal system.\r\n\r\nAlternatively, you can launch the operating system using virtual machine\r\nsoftware like VMware or virtualbox.\r\n\r\nOr you can run the operating system in a linux-based emulator like qemu or\r\nbochs.  The MonkOS makefile makes this alternative particularly easy by\r\nproviding a simple build rule to launch the OS in qemu:\r\n\r\n```bash\r\n$ make test\r\n```\r\n\r\nYou can also use the makefile to start a kernel debugging session under qemu\r\nand gdb. First, launch qemu in debugging mode:\r\n\r\n```bash\r\n$ make debug\r\n```\r\n\r\nThen start a gdb debugger session by attaching gdb to the qemu debugger\r\nendpoint:\r\n\r\n```bash\r\n$ gdb\r\n(gdb) set arch i386:x86-64\r\n(gdb) symbol-file build/monk.sys\r\n(gdb) target remote localhost:8864\r\n(gdb) layout source\r\n```\r\n\r\n##Other build options\r\n\r\nRun `make docs` to build nicely formatted documentation for MonkOS. You'll\r\nneed doxygen installed on your system to do this.\r\n\r\n```bash\r\n$ make docs\r\n```\r\n\r\nThe doxygen documents will appear in the `docs/monk` subdirectory. To view\r\nthem, launch them in your browser (in this case firefox):\r\n\r\n```bash\r\n$ firefox docs/monk/index.html\r\n```\r\n\r\nTo build code tags for easy symbol searching within your editor, use the\r\nmakefile to run the exuberant-tags utility:\r\n\r\n```bash\r\n$ make tags\r\n```\r\n\r\nThis produces a `.tags` file in your MonkOS directory.\r\n\r\nTo clean up all intermediate files, use the clean build:\r\n\r\n```bash\r\n$ make clean\r\n```\r\n\r\nTo clean all generated dependencies files, use the cleandeps build:\r\n\r\n```bash\r\n$ make cleandeps\r\n```\r\n\r\n##Resources\r\n\r\nThese are some of the resources I have relied on in my attempt to better\r\nunderstand the numerous and various aspects of bootloader and OS development:\r\n\r\n* [Intel 64 and IA-32 Architectures: Software Developerâ€™s Manual]\r\n  (https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html)\r\n* [The OsDev wiki](http://wiki.osdev.org/Main_Page)\r\n  * [Bare Bones guide](http://wiki.osdev.org/Bare_Bones)\r\n  * [Setting up long mode](http://wiki.osdev.org/Setting_Up_Long_Mode)\r\n  * [ISO 9660](http://wiki.osdev.org/ISO_9660)\r\n  * [PS/2 Keyboard](http://wiki.osdev.org/PS2_Keyboard)\r\n  * [PCI](http://wiki.osdev.org/PCI)\r\n* [The System V ABI](http://www.sco.com/developers/gabi/latest/contents.html)\r\n  * [AMD64 supplement](http://www.x86-64.org/documentation/abi.pdf)\r\n* [The El Torito specification]\r\n  (http://download.intel.com/support/motherboards/desktop/sb/specscdrom.pdf)\r\n* [Hardware Level VGA and SVGA Video Programming Information Page]\r\n  (http://www.osdever.net/FreeVGA/vga/vgareg.htm)\r\n  * [CRT Controller Registers](http://www.osdever.net/FreeVGA/vga/crtcreg.htm)\r\n  * [Advanced Programmable Interrupt Controller]\r\n    (http://www.osdever.net/tutorials/view/advanced-programming-interrupt-controller)\r\n* [The PCI Database](http://pcidatabase.com/)\r\n* [Write your own operating system](http://geezer.osdevbrasil.net/osd/index.htm)\r\n  * [PC keyboard](http://geezer.osdevbrasil.net/osd/kbd/index.htm)\r\n* [The Xeos project](https://github.com/macmade/XEOS)\r\n* [BareMetal OS](https://github.com/ReturnInfinity/BareMetal)\r\n* [IanOS](http://www.ijack.org.uk/)\r\n\r\n##License\r\n\r\nUse of this source code is governed by a BSD-style license that can be found\r\nin the [LICENSE](https://github.com/beevik/MonkOS/blob/master/LICENSE) file.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}